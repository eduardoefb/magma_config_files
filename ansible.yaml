-
   name: Update Centos
   hosts: ALL
   remote_user: root   
   tasks:

     - name: Repo config
       shell:
         echo "[mariadb]" > /etc/yum.repos.d/mariadb.repo;
         echo "name = MariaDB" >> /etc/yum.repos.d/mariadb.repo;
         echo "baseurl = http://yum.mariadb.org/10.2/centos7-amd64" >> /etc/yum.repos.d/mariadb.repo;
         echo "gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB" >> /etc/yum.repos.d/mariadb.repo;
         echo "gpgcheck=1" >> /etc/yum.repos.d/mariadb.repo;
       args:
         warn: no

     - name: Pupulate hosts 01
       lineinfile:
          path: /etc/hosts
          line: #MASTER_NODE_IP01# #MASTER_HOSTNAME_01#

     - name: Pupulate hosts 02
       lineinfile:
          path: /etc/hosts
          line: #MASTER_NODE_IP02# #MASTER_HOSTNAME_02#

     - name: Pupulate hosts 03
       lineinfile:
          path: /etc/hosts
          line: #MASTER_NODE_IP03# #MASTER_HOSTNAME_03#
          
     - name: Pupulate hosts vip
       lineinfile:
          path: /etc/hosts
          line: #MASTER_NODE_HIP# master_hip
                                    
     - name: Update system
       yum:
          name: '*'
          state: 'latest'
          
     - name: Disable IPV6        
       shell:
         echo "net.bridge.bridge-nf-call-ip6tables = 1" > /etc/sysctl.d/k8s.conf;
         echo "net.bridge.bridge-nf-call-iptables = 1" >> /etc/sysctl.d/k8s.conf;

     - name: Reboot after update
       reboot:
         msg: "Reboot triggered by Ansible"
         reboot_timeout: 360

     - name: Install nfs packages
       yum:
          name: "{{ packages }}"
       vars:
          packages:
             - nfs-utils
             - wget
             - rsync
- 
   name: Install dns and pcsd
   hosts: MASTER
   remote_user: root   
   tasks:
    
     - name: Install master specific packages
       yum:
          name: "{{ packages }}"
       vars:
          packages:
             - bind
             - bind-utils
             - pcs
             - corosync
             - pacemaker             
             
     - name: Enable rpcbind
       systemd:
         name: rpcbind
         enabled: yes
         masked: no    

     - name: Enable nfs-server
       systemd:
         name: nfs-server
         enabled: yes
         masked: no   
                 
     - name: Enable nfs-lock
       systemd:
         name: nfs-lock
         enabled: yes
         masked: no                   

     - name: Enable nfs-idmap 
       systemd:
         name: nfs-idmap 
         enabled: yes
         masked: no          
         
     - name: Enable pcsd
       systemd:
         name: pcsd
         enabled: yes
         masked: no                
          
     - name: Enable corosync
       systemd:
         name: corosync
         enabled: yes
         masked: no  

     - name: Enable pacemaker
       systemd:
         name: pacemaker
         enabled: yes
         masked: no   
                                      
     - name: Configure bind 
       shell:
         sed -i "s/listen-on port 53 { 127.0.0.1; };/listen-on port 53 { 127.0.0.1; $(ip addr show dev eth0 | grep -oP '(?<=inet )(.*)(?=\/)'); };/g" /etc/named.conf;
         sed -i 's/allow-query     { localhost; };/allow-query     { localhost; 0.0.0.0\/0; };/g'  /etc/named.conf;
       args:
         warn: no

     - name: Enable Bind
       systemd:
         name: named
         enabled: yes
         masked: no
         
     - name: Configure NFS part 1
       file:
         path: /srv/k8s_volume
         state: directory
         mode: '0755'
      
     - name: Configure NFS part 2
       shell:
         echo "/srv/k8s_volume #NETWORK#/24(rw,no_root_squash,subtree_check)" >> /etc/exports
       args:
         warn: no
                    
     - name: Reboot after BIND and NFS configuration
       reboot:
         msg: "Reboot triggered by Ansible"
         reboot_timeout: 360
     
     - name: Define hacluster password
       shell:
          echo "#PWD#" | passwd --stdin hacluster
          
     - name: Install other packages
       shell:
          yum install -y https://yum.postgresql.org/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm ;
          yum install -y postgresql96 postgresql96-contrib postgresql96-server pacemaker resource-agents resource-agents-paf pcs fence-agents-all fence-agents-virsh;
       args:
          warn: no
       
         
- 
   name: Configure cluster
   hosts: MASTER01
   remote_user: root   
   tasks:
     - name: Create and Configure the Cluster
       shell:
          pcs cluster auth #MASTER_HOSTNAME_01# #MASTER_HOSTNAME_02# #MASTER_HOSTNAME_03# -u hacluster -p "#PWD#";
          pcs cluster setup --name master-vip #MASTER_HOSTNAME_01# #MASTER_HOSTNAME_02# #MASTER_HOSTNAME_03#;          
          pcs cluster start --all;
          pcs cluster enable --all;
          pcs property set stonith-enabled=false;
          pcs property set no-quorum-policy=ignore;
          pcs property list;
          pcs resource create master_ha ocf:heartbeat:IPaddr2 ip=#MASTER_NODE_HIP# cidr_netmask=24 nic=eth0 op monitor interval=30s;
          pcs cluster stop --all;
          pcs cluster start --all
          
       args:
          warn: no

-
   name: Configure master
   hosts: MASTER
   remote_user: root   
   tasks:     
     - name: Configure psql
       shell:
          /usr/pgsql-9.6/bin/postgresql96-setup initdb;
          echo "listen_addresses = '*'" >> /var/lib/pgsql/9.6/data/postgresql.conf;
          systemctl enable postgresql-9.6;
          systemctl start postgresql-9.6;                
       args:
          warn: no
                              
-
   name: Configure all nodes
   hosts: ALL
   remote_user: root   
   tasks:
         
      - name: Install yum utils
        yum:
          name: yum-utils
          state: latest
          
      - name: Configure repository for docker installation
        shell:
          yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo;
          yum-config-manager --disable docker-ce-nightly
        args:
          warn: no

      - name: Install Docker Engine
        yum:
          name: "{{ packages }}"
        vars:
          packages:
            - docker-ce 
            - docker-ce-cli 
            - containerd.io
      
      - name: Enable docker
        systemd:           
          enabled: yes
          name: docker

      - name: Restart docker        
        systemd:           
          state: restarted
          daemon_reload: yes
          name: docker
       
      - name: Configure NFS partition
        shell:
          exportfs -a ;
          mkdir -p /media/node01;          
          echo "#MASTER_NODE_HIP#:/srv/k8s_volume /media/node01 nfs rw,hard,intr,rsize=8192,wsize=8192,timeo=14 0 0" >> /etc/fstab;          
        args:
          warn: no
          
      - name: Reboot after NFS configuration
        reboot:
           msg: "Reboot triggered by Ansible"
           reboot_timeout: 360      
           
      - name: Install kubernetes, part 1       
        shell:
          echo "[kubernetes]" > /etc/yum.repos.d/kubernetes.repo;
          echo "name=Kubernetes" >> /etc/yum.repos.d/kubernetes.repo;
          echo "baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-\$basearch" >> /etc/yum.repos.d/kubernetes.repo;
          echo "enabled=1"  >> /etc/yum.repos.d/kubernetes.repo;
          echo "gpgcheck=1"  >> /etc/yum.repos.d/kubernetes.repo;
          echo "repo_gpgcheck=1" >> /etc/yum.repos.d/kubernetes.repo;
          echo "gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg" >> /etc/yum.repos.d/kubernetes.repo;
          echo "exclude=kubelet kubeadm kubectl" >> /etc/yum.repos.d/kubernetes.repo;
          setenforce 0;
          sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config;
          yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes;
        args:
          warn: no          
               
      - name: Enable kubernetes
        systemd:           
          enabled: yes
          name: kubelet

      - name: Restart kuberetes        
        systemd:           
          state: restarted
          daemon_reload: yes
          name: kubelet            

-    
   hosts: MASTER01
   remote_user: root
   tasks:                                                              
      - name: Configure cluster        
        shell:           
           kubeadm init --control-plane-endpoint "#MASTER_NODE_HIP#:6443" --upload-certs > /tmp/output;
           cat /tmp/output | tail -2 | while read l; do echo $l; done > /tmp/init.sh;
           cat /tmp/output | grep -A5 'You can now join any number of the control-plane' | while read l; do echo $l; done | grep kubeadm > /tmp/init_master.sh;
           
      - name: Get file 01
        fetch:
           src: /tmp/init.sh
           dest: /tmp/init.sh
           flat: yes

      - name: Get file 02
        fetch:
           src: /tmp/init_master.sh
           dest: /tmp/init_master.sh
           flat: yes           

      - name: Configure master Part 1        
        shell:                 
          mkdir -p /root/.kube && cp -i /etc/kubernetes/admin.conf /root/.kube/config && chown root:root /root/.kube/config
        args:
          warn: no           
           
      - name: Configure master Part 2        
        shell:
           kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"  

      - name: Get kube config
        fetch:
           src: /root/.kube/config
           dest: kubeconfig
           flat: yes

-    
   hosts: MASTER02, MASTER03
   remote_user: root
   tasks:  
      - name: Transfer file to worker nodes
        copy:
           src: /tmp/init_master.sh
           dest: /tmp/init_master.sh
           owner: root
           group: root
           mode: 700
                                                                    
      - name: Execute configuration on secondary master node
        shell:           
           bash /tmp/init_master.sh
-    
   hosts: WORKER
   remote_user: root
   tasks:  
      - name: Transfer file to worker nodes
        copy:
           src: /tmp/init.sh
           dest: /tmp/init.sh
           owner: root
           group: root
           mode: 700
                                                                    
      - name: Execute configuration on worker nodes
        shell:           
           bash /tmp/init.sh

           
